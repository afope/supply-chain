pragma solidity ^0.4.24;

import "../coffeeaccesscontrol/CreatorRole.sol";
import "../coffeeaccesscontrol/EditorRole.sol";
import "../coffeeaccesscontrol/ConsumerRole.sol";
import "../coffeecore/Ownable.sol";

// Define a contract 'Supplychain'
contract SupplyChain is Ownable, ConsumerRole,  EditorRole, CreatorRole {

  // Define 'owner'
    //address owner;

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint  upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku;

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping (uint => Item) items;

  // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash,
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => string[]) itemsHistory;

  // Define enum 'State' with the following values:
  enum State
  {
    Written,  // 0
    Edited,  // 1
    Published,     // 2
    Read,  // 3
    ForSale, // 5
    Sold, // 6
    //Received, // 7
    Purchased // 8
    }

  State constant defaultState = State.Written;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the creator, goes on product can be verified by the Consumer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 5 stages
    address originCreatorID; // Metamask-Ethereum address of the Farmer
    string  originCreatorName; // Creator Name
    string  originCreatorInformation;  // Creator Information
    string  originPoemCountry; // Poem Country
    string  originPoemTitle;  // Poem Type
    uint    productID;  // Product ID potentially a combination of upc + sku
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    uint editingPrice; // Product editing price
    State   itemState;  // Product State as represented in the enum above
    address editorID;  // Metamask-Ethereum address of the Distributor
    // address retailerID; // Metamask-Ethereum address of the Retailer
    address consumerID; // Metamask-Ethereum address of the Consumer
  }

  // Define 8 events with the same 8 state values and accept 'upc' as input argument
  event Written(uint upc);
  event Edited(uint upc);
  event Published(uint upc);
  event Read(uint upc);
  event ForSale(uint upc);
  event Sold(uint upc);
  event Shipped(uint upc);
  event Purchased(uint upc);

  // Define a modifer that checks to see if msg.sender == owner of the contract
  modifier onlyOwner() {
    require(msg.sender == owner());
    _;
  }

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address);
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) {
    require(msg.value >= _price);
    _;
  }
  
  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _upc) {
    _;
    uint _price = items[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    items[_upc].consumerID.transfer(amountToReturn);
  }

  // Define a modifier that checks the editing price and refunds the remaining balance
  modifier checkEditingValue(uint _upc) {
    _;
    uint _price = items[_upc].editingPrice;
    uint amountToReturn = msg.value - _price;
    items[_upc].consumerID.transfer(amountToReturn);
  }

  // Define a modifier that checks if an item.state of a upc is Written
  modifier written(uint _upc) {
    require(items[_upc].itemState == State.Written);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Edited
  modifier edited(uint _upc) {
    require(items[_upc].itemState == State.Edited);
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Published
  modifier published(uint _upc) {
    require(items[_upc].itemState == State.Published);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Read
  modifier forSale(uint _upc) {
    require(items[_upc].itemState == State.Read);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is ForSale
  modifier sold(uint _upc) {
    require(items[_upc].itemState == State.ForSale);
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Sold
  modifier shipped(uint _upc) {
    require(items[_upc].itemState == State.Sold);
    _;
  }

  // // Define a modifier that checks if an item.state of a upc is Received
  // modifier received(uint _upc) {
  //   require(items[_upc].itemState == State.Received);
  //   _;
  // }

  // Define a modifier that checks if an item.state of a upc is Purchased
  modifier purchased(uint _upc) {
        require(items[_upc].itemState == State.Purchased);
    _;
  }

  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'sku' to 1
  // and set 'upc' to 1
  constructor() public payable {
    owner();
    sku = 1;
    upc = 1;
  }

  // // Define a function 'kill' if required
  // function kill() public {
  //   if (msg.sender == owner) {
  //     selfdestruct(owner);
  //   }
  // }

  // Define a function 'writeItem' that allows a farmer to mark an item 'Written'
  function writeItem(uint _upc, address _originCreatorID, string _originCreatorName, string _originCreatorInformation, string  _originPoemCountry, string  _originPoemTitle, uint _productID, string  _productNotes ) public
  {
    // Add the new item as part of Written
    items[sku]= Item({sku:sku, upc:_upc, ownerID:msg.sender, originCreatorID:_originCreatorID, originCreatorName:_originCreatorName,originCreatorInformation:_originCreatorInformation,originPoemCountry:_originPoemCountry,originPoemTitle:_originPoemTitle, productID:_productID, productNotes:_productNotes, productPrice:1, itemState:State.Written, consumerID:0, editorID:0, editingPrice:1});

    // Increment sku
    sku = sku + 1;

    // Emit the appropriate event
    emit Written(_upc);

  }

  // Define a function 'editItem' that allows a creator to mark an item 'Edited'
  function editItem(uint _upc) public payable
  // Call modifier to check if upc has passed previous supply chain stage
      written(_upc)
      paidEnough(_upc)
      checkEditingValue(_upc)
  // Call modifier to verify caller of this function
    onlyCreator()
    onlyEditor()

  {
    // Update the appropriate fields
    address editorID = msg.sender;
    uint editingPrice = items[sku].editingPrice;
    items[sku].editorID = editorID;
    items[sku].itemState = State.Edited;
    items[sku].editorID.transfer(editingPrice);
    // Emit the appropriate event
    emit Edited(_upc);
  }

  // Define a function 'publishItem' that allows a creator to mark an item 'Published'
  function publishItem(uint _upc) public
  // Call modifier to check if upc has passed previous supply chain stage
    edited(_upc)
  // Call modifier to verify caller of this function
    onlyCreator()
  {
    // Update the appropriate fields
    items[sku].itemState = State.Published;

    // Emit the appropriate event
    emit Published(_upc);

  }

    // Define a function 'readItem' that allows a consumer to mark an item 'Read'
  function readItem(uint _upc) public 
  // Call modifier to check if upc has passed previous supply chain stage
    published(_upc)
  // Call modifier to verify caller of this function
    onlyConsumer()
  {
    // Update the appropriate fields
    items[sku].itemState = State.Read;
    
    // Emit the appropriate event
    emit Read(_upc);
  }

  // Define a function 'sellItem' that allows a creator to mark an item 'ForSale'
  function sellItem(uint _upc, uint _price) public 
  // Call modifier to check if upc has passed previous supply chain stage
    published(_upc)
  
  // Call modifier to verify caller of this function
    onlyCreator()
  
  {
    // Update the appropriate fields
      items[sku].itemState = State.ForSale;
    // Emit the appropriate event
        emit ForSale(_upc);
  }

  // Define a function 'buyItem' that allows the disributor to mark an item 'Sold'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough,
  // and any excess ether sent is refunded back to the buyer
  function buyItem(uint _upc) public payable
    // Call modifier to check if upc has passed previous supply chain stage
      sold(_upc)
    // Call modifer to check if buyer has paid enough
      paidEnough(_upc)
    // Call modifer to send any excess ether back to buyer
      checkValue(_upc)
    {
    // Update the appropriate fields - ownerID, distributorID, itemState
      address ownerID = msg.sender;
      uint price = items[sku].productPrice;
      items[sku].consumerID = ownerID;
      items[sku].itemState = State.Sold;
    // Transfer money to farmer
      items[sku].originCreatorID.transfer(price);
    // emit the appropriate event
      emit Sold(_upc);
  }

  // // Define a function 'shipItem' that allows the distributor to mark an item 'Shipped'
  // // Use the above modifers to check if the item is sold
  // function shipItem(uint _upc) public
  //   // Call modifier to check if upc has passed previous supply chain stage
  //       sold(_upc)
  //   // Call modifier to verify caller of this function
  //       onlyCreator()
  //   {
  //   // Update the appropriate fields
  //       items[sku].itemState = State.S;
  //   // Emit the appropriate event
  //     emit Shipped(_upc);
  // }

  // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
  // Use the above modifiers to check if the item is received
  function purchaseItem(uint _upc) public
    // Call modifier to check if upc has passed previous supply chain stage
      shipped(_upc)
    // Access Control List enforced by calling Smart Contract / DApp
      onlyConsumer()
    {
    // Update the appropriate fields - ownerID, consumerID, itemState
      address ownerID = msg.sender;
      items[sku].consumerID = ownerID;
      items[sku].itemState = State.Sold;
    // Emit the appropriate event
    emit Purchased(_upc);
  }

  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _upc) public view returns
  (
  uint    itemSKU,
  uint    itemUPC,
  address ownerID,
  address originCreatorID,
  string  originCreatorName,
  string  originCreatorInformation,
  string  originPoemCountry,
  string  originPoemTitle
  )
{
  // Assign values to the 8 parameters
  return
  (
  itemSKU,
  itemUPC,
  ownerID,
  originCreatorID,
  originCreatorName,
  originCreatorInformation,
  originPoemCountry,
  originPoemTitle
  );
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(uint _upc) public view returns
  (
  uint    itemSKU,
  uint    itemUPC,
  uint    productID,
  string  productNotes,
  uint    productPrice,
  uint    itemState,
  address editorID,
  address consumerID
  )
  {
    // Assign values to the 9 parameters


  return
  (
  itemSKU,
  itemUPC,
  productID,
  productNotes,
  productPrice,
  itemState,
  editorID,
  consumerID
  );
  }
}
