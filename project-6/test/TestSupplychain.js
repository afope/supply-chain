// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function (accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    var ownerID = accounts[0]
    const originCreatorID = accounts[1]
    const originCreatorName = "Bai"
    const originCreatorInformation = "Yabbah Valley"
    const originPoemCountry = "Ghana"
    const originPoemTitle = "Wote Wote"
    var productID = sku + upc
    const productNotes = "Na de wote dey wote"
    const productPrice = web3.toWei('1', "ether")
    const editingPrice = web3.toWei('1', "ether")
    var itemState = 0
    const editorID = accounts[2]
    // const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    // 1st Test
    it("Testing smart contract function writeItem() that allows a creator to make something", async () => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event Wriiten()
        var event = supplyChain.Written()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Written by calling function writeItem()
        await supplyChain.writeItem(upc, originCreatorID, originCreatorName, originCreatorInformation, originPoemCountry, originPoemTitle, productID, productNotes)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0].toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], ownerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originCreatorID, 'Error: Missing or Invalid originCreatorID')
        assert.equal(resultBufferOne[4], originCreatorName, 'Error: Missing or Invalid originCreatorName')
        assert.equal(resultBufferOne[5], originCreatorInformation, 'Error: Missing or Invalid originCreatorInformation')
        assert.equal(resultBufferOne[6], originPoemCountry, 'Error: Missing or Invalid originPoemCountry')
        assert.equal(resultBufferOne[7], originPoemTitle, 'Error: Missing or Invalid originPoemTitle')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 2nd Test
    it("Testing smart contract function editItem() that allows a creator or editor to edit work", async () => {
        const supplyChain = await SupplyChain.deployed()
        await supplyChain.addEditor(editorID);

        // Declare and Initialize a variable for event
        var eventEmitted = false


        // Watch the emitted event Edited()
        var event = supplyChain.Edited()
        await event.watch((err, res) => {
            eventEmitted = true
        })


        // Mark an item as Edited by calling function editItem()
        await supplyChain.editItem(upc, {from: editorID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)


        // Verify the result set
        assert.equal(resultBufferOne[0].toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], editorID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originCreatorID, 'Error: Missing or Invalid originCreatorID')
        assert.equal(resultBufferOne[4], originCreatorName, 'Error: Missing or Invalid originCreatorName')
        assert.equal(resultBufferOne[5], originCreatorInformation, 'Error: Missing or Invalid originCreatorInformation')
        assert.equal(resultBufferOne[6], originPoemCountry, 'Error: Missing or Invalid originPoemCountry')
        assert.equal(resultBufferOne[7], originPoemTitle, 'Error: Missing or Invalid originPoemTitle')
        assert.equal(resultBufferTwo[5].toNumber(), 1, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')

    })

    // 3rd Test
    it("Testing smart contract function publishItem() that allows a creator to publish work", async () => {
        const supplyChain = await SupplyChain.deployed()
        await supplyChain.addCreator(originCreatorID);

        // Declare and Initialize a variable for event
        var eventEmitted = false;


        // Watch the emitted event Published()
        var event = supplyChain.Published()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Published by calling function publishItem()
        await supplyChain.publishItem(upc, {from: originCreatorID})


        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0].toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originCreatorID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originCreatorID, 'Error: Missing or Invalid originCreatorID')
        assert.equal(resultBufferOne[4], originCreatorName, 'Error: Missing or Invalid originCreatorName')
        assert.equal(resultBufferOne[5], originCreatorInformation, 'Error: Missing or Invalid originCreatorInformation')
        assert.equal(resultBufferOne[6], originPoemCountry, 'Error: Missing or Invalid originPoemCountry')
        assert.equal(resultBufferOne[7], originPoemTitle, 'Error: Missing or Invalid originPoemTitle')
        assert.equal(resultBufferTwo[5].toNumber(), 2, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 4th Test
    it("Testing smart contract function readItem() that allows a consumer to mark item as read", async () => {
        const supplyChain = await SupplyChain.deployed()
        await supplyChain.addConsumer(consumerID);

        // Declare and Initialize a variable for event
        var eventEmitted = false;


        // Watch the emitted event Read()
        var event = supplyChain.Read()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Read by calling function readItem()
        await supplyChain.readItem(upc, {from: consumerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0].toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originCreatorID, 'Error: Missing or Invalid originCreatorID')
        assert.equal(resultBufferOne[4], originCreatorName, 'Error: Missing or Invalid originCreatorName')
        assert.equal(resultBufferOne[5], originCreatorInformation, 'Error: Missing or Invalid originCreatorInformation')
        assert.equal(resultBufferOne[6], originPoemCountry, 'Error: Missing or Invalid originPoemCountry')
        assert.equal(resultBufferOne[7], originPoemTitle, 'Error: Missing or Invalid originPoemTitle')
        assert.equal(resultBufferTwo[5].toNumber(), 3, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 5th Test
    it("Testing smart contract function sellItem() that allows a creator to mark an item as ForSale", async () => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false;

        // Watch the emitted event ForSale()
        var event = supplyChain.ForSale()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as ForSale by calling function sellItem()
        await supplyChain.sellItem(upc, productPrice, {from: originCreatorID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0].toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originCreatorID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originCreatorID, 'Error: Missing or Invalid originCreatorID')
        assert.equal(resultBufferOne[4], originCreatorName, 'Error: Missing or Invalid originCreatorName')
        assert.equal(resultBufferOne[5], originCreatorInformation, 'Error: Missing or Invalid originCreatorInformation')
        assert.equal(resultBufferOne[6], originPoemCountry, 'Error: Missing or Invalid originPoemCountry')
        assert.equal(resultBufferOne[7], originPoemTitle, 'Error: Missing or Invalid originPoemTitle')
        assert.equal(resultBufferTwo[5].toNumber(), 4, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')

    })

    // 6th Test
    it("Testing smart contract function buyItem() that allows a consumer to buy work", async () => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false;

        // Watch the emitted event Sold()
        var event = supplyChain.Sold()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.buyItem(upc, {value: productPrice, from: consumerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0].toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originCreatorID, 'Error: Missing or Invalid originCreatorID')
        assert.equal(resultBufferOne[4], originCreatorName, 'Error: Missing or Invalid originCreatorName')
        assert.equal(resultBufferOne[5], originCreatorInformation, 'Error: Missing or Invalid originCreatorInformation')
        assert.equal(resultBufferOne[6], originPoemCountry, 'Error: Missing or Invalid originPoemCountry')
        assert.equal(resultBufferOne[7], originPoemTitle, 'Error: Missing or Invalid originPoemTitle')
        assert.equal(resultBufferTwo[5].toNumber(), 5, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 7th Test
    it("Testing smart contract function shipItem() that allows a creator to ship work", async () => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false;

        // Watch the emitted event Shipped()
        var event = supplyChain.Shipped()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Shipped by calling function shipItem()
        await supplyChain.shipItem(upc, {from: originCreatorID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0].toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originCreatorID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originCreatorID, 'Error: Missing or Invalid originCreatorID')
        assert.equal(resultBufferOne[4], originCreatorName, 'Error: Missing or Invalid originCreatorName')
        assert.equal(resultBufferOne[5], originCreatorInformation, 'Error: Missing or Invalid originCreatorInformation')
        assert.equal(resultBufferOne[6], originPoemCountry, 'Error: Missing or Invalid originPoemCountry')
        assert.equal(resultBufferOne[7], originPoemTitle, 'Error: Missing or Invalid originPoemTitle')
        assert.equal(resultBufferTwo[5].toNumber(), 6, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase item", async () => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false;

        // Watch the emitted event Purchased()
        var event = supplyChain.Purchased()
        await event.watch((err, res) => {
            eventEmitted = true
        })


        // Mark an item as Sold by calling function buyItem()
        await supplyChain.purchaseItem(upc, {from: consumerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0].toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originCreatorID, 'Error: Missing or Invalid originCreatorID')
        assert.equal(resultBufferOne[4], originCreatorName, 'Error: Missing or Invalid originCreatorName')
        assert.equal(resultBufferOne[5], originCreatorInformation, 'Error: Missing or Invalid originCreatorInformation')
        assert.equal(resultBufferOne[6], originPoemCountry, 'Error: Missing or Invalid originPoemCountry')
        assert.equal(resultBufferOne[7], originPoemTitle, 'Error: Missing or Invalid originPoemTitle')
        assert.equal(resultBufferTwo[5].toNumber(), 7, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async () => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)

        // Verify the result set:
        assert.equal(resultBufferOne[0].toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originCreatorID, 'Error: Missing or Invalid originCreatorID')
        assert.equal(resultBufferOne[4], originCreatorName, 'Error: Missing or Invalid originCreatorName')
        assert.equal(resultBufferOne[5], originCreatorInformation, 'Error: Missing or Invalid originCreatorInformation')
        assert.equal(resultBufferOne[6], originPoemCountry, 'Error: Missing or Invalid originPoemCountry')
        assert.equal(resultBufferOne[7], originPoemTitle, 'Error: Missing or Invalid originPoemTitle')
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async () => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set:
        assert.equal(resultBufferTwo[0].toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], productID, 'Error: Missing or Invalid productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid productNotes')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Missing or Invalid productPrice')
        assert.equal(resultBufferTwo[5].toNumber(), 7, 'Error: Missing or Invalid itemState')
        assert.equal(resultBufferTwo[6], editorID, 'Error: Missing or Invalid editorID')
        assert.equal(resultBufferTwo[7], consumerID, 'Error: Missing or Invalid consumerID')
    })

});

